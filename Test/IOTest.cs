using NUnit.Framework;
using SportTracksXmlReader;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using Utilities;

namespace Test
{
    public class IOTest
    {
        [TestCase("2008", 476, "")]
        [TestCase("2018", 289, "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")]
        public void GPSData_Valid_Encoding(string year, int dataLength, string binaryData)
        {
            Console.WriteLine($"Testing serialization of {year} data");
            var gpsRoute = new GPSRoute
            {
                TrackData = new TrackData
                {
                    Version = 4,
                    Data = binaryData
                },
            }; 

            gpsRoute.DecodeBinaryData();
            Assert.That(gpsRoute.ElevationData.Count, Is.EqualTo(dataLength), "Elevation data not correct size");

            gpsRoute.TrackData.Data = string.Empty;
            gpsRoute.EncodeBinaryData();
            Assert.That(gpsRoute.TrackData.Data, Is.EqualTo(binaryData), "Encoded data doesn't match source");
        }

        /// <summary>
        /// This is used to split a corrupt logbook into individual activity files and attempt to
        /// deserialize. The problematic file can then be identified.
        /// </summary>     
        public void Split_Activities_And_Deserialize()
        {
           XNamespace ns = "urn:uuid:D0EB2ED5-49B6-44e3-B13C-CF15BE7DD7DD";
            var elements = XDocument.Load(@"C:\temp\cutdownlogbook.logbook3");
            var linqToXmlActivity = elements.Descendants(ns + "Activity").Where(e => (string)e.Attribute("hasStartTime") == "true");

            int index = 1;
            foreach (var activity in linqToXmlActivity)
            {
                var file = Path.Combine(@"C:\temp\activities", $"{index++}.xml");
                activity.Save(file);
            }
        
            XmlSerializer xmlSerializer = new(typeof(Activity));

            for (int loadIndex = 1; loadIndex < index; loadIndex++)
            {
                var loadDoc = new XmlDocument();
                var file = Path.Combine(@"C:\temp\activities", $"{loadIndex}.xml");
                loadDoc.Load(file);

                var loadElement = loadDoc.DocumentElement;
                try
                {
                    var activity = xmlSerializer.Deserialize(new XmlNodeReader(loadElement)) as Activity;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to load {loadIndex}.xml : {ex}");
                }
            }
        }

        public void Deserialize_Valid_FitFile()
        {
            var expected = "Pending setup of data";
            var fitDeserializer = new FitDeserializer();

            var gpsRoute = new GPSRoute();
            gpsRoute.TrackData = new TrackData { Version = 4 };
            gpsRoute.TrackData.Data = expected;
            gpsRoute.DecodeBinaryData();

            fitDeserializer.Deserialize(@"Pending setup of data");
            var activity = fitDeserializer.Activity;
            var gpsData = activity.GPSRoute.TrackData.Data;

            // There was a difference in the Latitude Data
            // Caused by rounding differences. Fixed by calulating in double then converting to float at the end
            // Call CompareArrays to investigate
            CompareArrays(activity.GPSRoute.LatitudeData, gpsRoute.LatitudeData);

            Assert.That(gpsData, Is.EqualTo(expected));
        }

        /// <summary>
        /// Use for debugging
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="lhs"></param>
        /// <param name="rhs"></param>
        public void CompareArrays<T>(List<T> lhs, List<T> rhs)
        {
            for (int i = 0; i < lhs.Count; i++)
            {
                if (lhs[i].ToString() != rhs[i].ToString())
                {
                    Console.WriteLine($"ERROR! {i}: LHS {lhs[i]} - RHS {rhs[i]}");
                }
            }
        }
    }
}